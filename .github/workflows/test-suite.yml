name: TimeLocker Test Suite

on:
  workflow_dispatch:
#  push:
#    branches: [main, staging]
#  pull_request:
#    branches: [main, staging]

env:
  COVERAGE_THRESHOLD: 70

jobs:
  test:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path:         ~/.cache/pip
          key:          ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
                        ${{ runner.os }}-pip-

      - name: Install system dependencies (Ubuntu)
        if:   matrix.os == 'ubuntu-latest'
        run:  |
              sudo apt-get update
              # Install restic 0.18.0 or later (Ubuntu repos have older version)
              RESTIC_VERSION="0.18.0"
              wget https://github.com/restic/restic/releases/download/v${RESTIC_VERSION}/restic_${RESTIC_VERSION}_linux_amd64.bz2
              bunzip2 restic_${RESTIC_VERSION}_linux_amd64.bz2
              sudo mv restic_${RESTIC_VERSION}_linux_amd64 /usr/local/bin/restic
              sudo chmod +x /usr/local/bin/restic
              restic version

      - name: Install system dependencies (macOS)
        if:   matrix.os == 'macos-latest'
        run:  |
              brew install restic

      - name: Install system dependencies (Windows)
        if:   matrix.os == 'windows-latest'
        run:  |
              choco install restic

      - name: Install Python dependencies
        run:  |
              python -m pip install --upgrade pip
              pip install -e .[dev]

      - name: Run tests with coverage
        env:
          PYTHONPATH: src
        run:  |
              pytest tests/ --cov=src/TimeLocker --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}
              
      - name: Upload coverage reports to Codecov
        if:   matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        continue-on-error: true
        uses: codecov/codecov-action@v5
        with:
          token:            ${{ secrets.CODECOV_TOKEN }}
          file:             ./coverage.xml
          flags:            unittests
          name:             codecov-umbrella
          fail_ci_if_error: false

      - name: Archive test results
        if:   always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
                htmlcov/
                .coverage
                coverage.xml


  quality-gate:
    runs-on: ubuntu-latest
    needs: [test]
    if:      always()
    permissions:
      contents:      read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run:  |
              python -m pip install --upgrade pip
              pip install -e .[dev]

      - name:              Download test artifacts
        uses:              actions/download-artifact@v4
        with:
          name: test-results-ubuntu-latest-3.12
        continue-on-error: true

      - name: Check coverage threshold
        run:  |
              pip install coverage
              if [ -f coverage.xml ]; then
                coverage report --fail-under=70 || echo "Coverage below 70% threshold"
              else
                echo "No coverage.xml found, skipping coverage check"
              fi

      - name: Generate quality report
        run:  |
              python -c "
              import json
              import xml.etree.ElementTree as ET
              import os
              from datetime import datetime

              # Parse coverage XML
              try:
                  if os.path.exists('coverage.xml'):
                      tree = ET.parse('coverage.xml')
                      root = tree.getroot()
                      coverage = float(root.get('line-rate', 0)) * 100
                  else:
                      coverage = 0
                      print('No coverage.xml found, setting coverage to 0%')
              except Exception as e:
                  print(f'Error parsing coverage.xml: {e}')
                  coverage = 0

              # Create quality report
              quality_report = {
                  'coverage_percentage': coverage,
                  'coverage_threshold': 70,
                  'coverage_passed': coverage >= 70,
                  'timestamp': datetime.utcnow().isoformat() + 'Z'
              }

              with open('quality-report.json', 'w') as f:
                  json.dump(quality_report, f, indent=2)

              print(f'Coverage: {coverage:.1f}%')
              print(f'Threshold: 70%')
              print(f'Passed: {coverage >= 70}')
              "

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.json

      - name: Comment PR with results
        if:   github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
                  const fs = require('fs');

                  try {
                    const qualityReport = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));

                    const comment = `## üß™ Test Results

                    | Metric | Value | Status |
                    |--------|-------|--------|
                    | Coverage | ${qualityReport.coverage_percentage.toFixed(1)}% | ${qualityReport.coverage_passed ? '‚úÖ' : '‚ùå'} |
                    | Threshold | ${qualityReport.coverage_threshold}% | - |

                    ${qualityReport.coverage_passed ?
                      '‚úÖ All quality gates passed!' :
                      '‚ùå Quality gates failed. Please improve test coverage to meet the threshold.'}
                    `;

                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: comment
                    });
                  } catch (error) {
                    console.log('Could not create PR comment:', error);
                  }

  notify:
    runs-on: ubuntu-latest
    needs: [test, quality-gate]
    if:      always()
    permissions:
      contents: read
    steps:
      - name: Notify on success
        if:   needs.test.result == 'success' && needs.quality-gate.result == 'success'
        run:  |
              echo "‚úÖ All tests passed and quality gates met!"

      - name: Notify on failure
        if:   needs.test.result == 'failure' || needs.quality-gate.result == 'failure'
        run:  |
              echo "‚ùå Tests failed or quality gates not met!"
              exit 1
