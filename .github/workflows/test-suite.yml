name: TimeLocker Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12', '3.13']
        exclude:
          # Reduce matrix size for faster CI
          - os:             windows-latest
            python-version: '3.13'
          - os:             macos-latest
            python-version: '3.13'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path:         ~/.cache/pip
          key:          ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
                        ${{ runner.os }}-pip-

      - name: Install system dependencies (Ubuntu)
        if:   matrix.os == 'ubuntu-latest'
        run:  |
              sudo apt-get update
              # Install restic 0.18.0 or later (Ubuntu repos have older version)
              RESTIC_VERSION="0.18.0"
              wget https://github.com/restic/restic/releases/download/v${RESTIC_VERSION}/restic_${RESTIC_VERSION}_linux_amd64.bz2
              bunzip2 restic_${RESTIC_VERSION}_linux_amd64.bz2
              sudo mv restic_${RESTIC_VERSION}_linux_amd64 /usr/local/bin/restic
              sudo chmod +x /usr/local/bin/restic
              restic version

      - name: Install system dependencies (macOS)
        if:   matrix.os == 'macos-latest'
        run:  |
              brew install restic

      - name: Install system dependencies (Windows)
        if:   matrix.os == 'windows-latest'
        run:  |
              choco install restic

      - name: Install Python dependencies
        run:  |
              python -m pip install --upgrade pip
              pip install -e .

      - name: Lint with flake8
        run:  |
              pip install flake8
              # Stop the build if there are Python syntax errors or undefined names
              flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
              # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
              flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking with mypy
        run:  |
              pip install mypy
              mypy src/TimeLocker --ignore-missing-imports || true

      - name: Run unit tests
        env:
          PYTHONPATH: src
        run:  |
              pytest tests/TimeLocker/ -v --tb=short --maxfail=10

      - name: Run unit tests with coverage
        env:
          PYTHONPATH: src
        run:  |
              pytest tests/TimeLocker/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Run integration tests
        env:
          PYTHONPATH: src
        run:  |
              pytest tests/TimeLocker/integration/ -v --tb=short

      - name: Run security tests
        env:
          PYTHONPATH: src
        run:  |
              pytest tests/TimeLocker/security/ -v --tb=short

      - name: Run critical path tests
        env:
          PYTHONPATH: src
        run:  |
              pytest tests/TimeLocker/backup/test_critical_backup_paths.py -v --tb=short

      - name: Upload coverage reports to Codecov
        if:   matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v3
        with:
          file:             ./coverage.xml
          flags:            unittests
          name:             codecov-umbrella
          fail_ci_if_error: false

      - name: Archive test results
        if:   always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
                htmlcov/
                .coverage
                coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run:  |
              python -m pip install --upgrade pip
              pip install -e .[dev]
              pip install bandit safety

      - name: Run Bandit security scan
        run:  |
              bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety check
        run:  |
              safety check --json --output safety-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
                bandit-report.json
                safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run:  |
              python -m pip install --upgrade pip
              pip install -e .[dev]
              sudo apt-get update
              # Install restic 0.18.0 or later (Ubuntu repos have older version)
              RESTIC_VERSION="0.18.0"
              wget https://github.com/restic/restic/releases/download/v${RESTIC_VERSION}/restic_${RESTIC_VERSION}_linux_amd64.bz2
              bunzip2 restic_${RESTIC_VERSION}_linux_amd64.bz2
              sudo mv restic_${RESTIC_VERSION}_linux_amd64 /usr/local/bin/restic
              sudo chmod +x /usr/local/bin/restic
              restic version

      - name: Run performance benchmarks
        env:
          PYTHONPATH: src
        run:  |
              pytest tests/TimeLocker/ -k "benchmark" --benchmark-only --benchmark-json=benchmark-results.json || true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if:      always()
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run:  |
              python -m pip install --upgrade pip
              pip install -e .[dev]

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results-ubuntu-latest-3.12

      - name: Check coverage threshold
        run:  |
              pip install coverage
              coverage report --fail-under=80 || echo "Coverage below 80% threshold"

      - name: Generate quality report
        run:  |
              python -c "
              import json
              import xml.etree.ElementTree as ET
              
              # Parse coverage XML
              try:
                  tree = ET.parse('coverage.xml')
                  root = tree.getroot()
                  coverage = float(root.get('line-rate', 0)) * 100
              except:
                  coverage = 0
              
              # Create quality report
              quality_report = {
                  'coverage_percentage': coverage,
                  'coverage_threshold': 80,
                  'coverage_passed': coverage >= 80,
                  'timestamp': '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
              }
              
              with open('quality-report.json', 'w') as f:
                  json.dump(quality_report, f, indent=2)
              
              print(f'Coverage: {coverage:.1f}%')
              print(f'Threshold: 80%')
              print(f'Passed: {coverage >= 80}')
              "

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.json

      - name: Comment PR with results
        if:   github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
                  const fs = require('fs');
                  
                  try {
                    const qualityReport = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
                  
                    const comment = `## üß™ Test Results
                  
                    | Metric | Value | Status |
                    |--------|-------|--------|
                    | Coverage | ${qualityReport.coverage_percentage.toFixed(1)}% | ${qualityReport.coverage_passed ? '‚úÖ' : '‚ùå'} |
                    | Threshold | ${qualityReport.coverage_threshold}% | - |
                  
                    ${qualityReport.coverage_passed ? 
                      '‚úÖ All quality gates passed!' : 
                      '‚ùå Quality gates failed. Please improve test coverage.'}
                    `;
                  
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: comment
                    });
                  } catch (error) {
                    console.log('Could not create PR comment:', error);
                  }

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, performance-test, quality-gate]
    if:      always()
    permissions:
      contents: read
    steps:
      - name: Notify on success
        if:   needs.test.result == 'success' && needs.quality-gate.result == 'success'
        run:  |
              echo "‚úÖ All tests passed and quality gates met!"

      - name: Notify on failure
        if:   needs.test.result == 'failure' || needs.quality-gate.result == 'failure'
        run:  |
              echo "‚ùå Tests failed or quality gates not met!"
              exit 1
