y   y t#!/bin/bash

# TimeLocker Automation Setup Script
f# This script helps you set up secure password management and scheduling for TimeLocker

set -e

TIMELOCKER_DIR="/home/bcherrington/Projects/Auriora/TimeLocker"
CONFIG_DIR="/home/bcherrington/.config/timelocker"
SCRIPTS_DIR="/home/bcherrington/.local/bin"
LOGS_DIR="/home/bcherrington/.local/share/timelocker"

echo "🔧 Setting up TimeLocker automation..."

# Create necessary directories
mkdir -p "$CONFIG_DIR"
mkdir -p "$SCRIPTS_DIR"
mkdir -p "$LOGS_DIR"

# 1. Create credential manager setup script
echo "📝 Creating credential manager setup script..."
cat > "$SCRIPTS_DIR/timelocker-setup-credentials.sh" << EOF
#!/bin/bash

# TimeLocker Credential Setup Script
# This script helps you set up encrypted password storage

set -e

cd "$TIMELOCKER_DIR"

echo "🔐 Setting up TimeLocker encrypted credential storage..."
echo ""
echo "This will store your repository passwords encrypted with a master password."
echo "The master password will be required to unlock credentials for automated backups."
echo ""

# Check if credential manager is already set up
if python3 -c "
from src.TimeLocker.security.credential_manager import CredentialManager
cm = CredentialManager()
import sys
sys.exit(0 if cm.credentials_file.exists() else 1)
" 2>/dev/null; then
    echo "✅ Credential manager is already initialized"
    echo ""
    echo "Available commands:"
    echo "  Store password:    python3 -m src.TimeLocker.cli credentials store <repo-name>"
    echo "  List credentials:  python3 -m src.TimeLocker.cli credentials list"
    echo "  Remove password:   python3 -m src.TimeLocker.cli credentials remove <repo-name>"
    echo ""
else
    echo "Setting up credential manager for the first time..."
    echo ""
    echo "You'll need to:"
    echo "1. Choose a master password (this encrypts all repository passwords)"
    echo "2. Store passwords for each repository you want to backup"
    echo ""
    echo "Example setup:"
    echo "  python3 -m src.TimeLocker.cli credentials store local-test"
    echo "  python3 -m src.TimeLocker.cli credentials store my-s3-repo"
    echo ""
fi

echo "📋 Next steps:"
echo "1. Store passwords for your repositories:"
echo "   python3 -m src.TimeLocker.cli credentials store <repository-name>"
echo ""
echo "2. Test credential access:"
echo "   python3 -m src.TimeLocker.cli credentials list"
echo ""
echo "3. Update automation scripts to unlock credentials before backup"
EOF

chmod +x "$SCRIPTS_DIR/timelocker-setup-credentials.sh"
echo "✅ Created credential setup script: $SCRIPTS_DIR/timelocker-setup-credentials.sh"

# 2. Create backup script
echo "📝 Creating backup script..."
cat > "$SCRIPTS_DIR/timelocker-backup.sh" << EOF
#!/bin/bash

# TimeLocker Automated Backup Script with Encrypted Credentials
# Generated by setup_automation.sh

set -e

# Configuration
MASTER_PASSWORD_FILE="$CONFIG_DIR/master_password"
BACKUP_TARGETS=("my-backup-target")  # Add your backup target names here

# Set working directory
cd "$TIMELOCKER_DIR"

# Function to log messages
log_message() {
    echo "\$(date): \$1" >> "$LOGS_DIR/backup.log"
}

log_message "Starting TimeLocker backup..."

# Check if master password file exists
if [ ! -f "\$MASTER_PASSWORD_FILE" ]; then
    log_message "ERROR: Master password file not found at \$MASTER_PASSWORD_FILE"
    echo "Error: Master password file not found. Please create it with:"
    echo "echo 'your-master-password' > $CONFIG_DIR/master_password"
    echo "chmod 600 $CONFIG_DIR/master_password"
    exit 1
fi

# Read master password
MASTER_PASSWORD=\$(cat "\$MASTER_PASSWORD_FILE")

# Unlock credential manager
log_message "Unlocking credential manager..."
if ! python3 -m src.TimeLocker.cli credentials unlock --password "\$MASTER_PASSWORD"; then
    log_message "ERROR: Failed to unlock credential manager"
    exit 1
fi

# Run backups for each target
BACKUP_SUCCESS=true
for target in "\${BACKUP_TARGETS[@]}"; do
    log_message "Starting backup for target: \$target"

    if python3 -m src.TimeLocker.cli backup run "\$target"; then
        log_message "Backup completed successfully for target: \$target"
    else
        log_message "Backup failed for target: \$target (exit code: \$?)"
        BACKUP_SUCCESS=false
    fi
done

# Lock credential manager for security
log_message "Locking credential manager..."
python3 -m src.TimeLocker.cli credentials lock

# Final status
if [ "\$BACKUP_SUCCESS" = true ]; then
    log_message "All backups completed successfully"
    exit 0
else
    log_message "One or more backups failed"
    exit 1
fi
EOF

chmod +x "$SCRIPTS_DIR/timelocker-backup.sh"
echo "✅ Created backup script: $SCRIPTS_DIR/timelocker-backup.sh"

# 3. Create systemd service file template
echo "📝 Creating systemd service template..."
cat > "$CONFIG_DIR/timelocker-backup.service" << EOF
[Unit]
Description=TimeLocker Backup Service with Encrypted Credentials
After=network.target

[Service]
Type=oneshot
User=$USER
Group=$USER
WorkingDirectory=$TIMELOCKER_DIR
ExecStart=$SCRIPTS_DIR/timelocker-backup.sh
StandardOutput=journal
StandardError=journal

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=read-only
ReadWritePaths=$LOGS_DIR $CONFIG_DIR /tmp /home/$USER/.timelocker
EOF

echo "✅ Created systemd service template: $CONFIG_DIR/timelocker-backup.service"

# 4. Create systemd timer file template
echo "📝 Creating systemd timer template..."
cat > "$CONFIG_DIR/timelocker-backup.timer" << 'EOF'
[Unit]
Description=Run TimeLocker backup daily
Requires=timelocker-backup.service

[Timer]
# Run daily at 2 AM
OnCalendar=daily
# Add random delay up to 30 minutes to avoid system load spikes
RandomizedDelaySec=1800
# Run missed backups on boot
Persistent=true

[Install]
WantedBy=timers.target
EOF

echo "✅ Created systemd timer template: $CONFIG_DIR/timelocker-backup.timer"

# 5. Create crontab template
echo "📝 Creating crontab template..."
cat > "$CONFIG_DIR/crontab-example" << EOF
# TimeLocker Backup Crontab Entry
# Add this line to your crontab with: crontab -e

# Run backup daily at 2 AM
0 2 * * * $SCRIPTS_DIR/timelocker-backup.sh

# Alternative schedules:
# Every 6 hours: 0 */6 * * * $SCRIPTS_DIR/timelocker-backup.sh
# Twice daily (6 AM and 6 PM): 0 6,18 * * * $SCRIPTS_DIR/timelocker-backup.sh
# Weekly on Sunday at 3 AM: 0 3 * * 0 $SCRIPTS_DIR/timelocker-backup.sh
EOF

echo "✅ Created crontab template: $CONFIG_DIR/crontab-example"

# 6. Create test script
echo "📝 Creating test script..."
cat > "$SCRIPTS_DIR/timelocker-test.sh" << EOF
#!/bin/bash

# TimeLocker Test Script with Encrypted Credentials
# Use this to test your configuration before setting up automation

set -e

echo "🧪 Testing TimeLocker configuration..."

# Change to TimeLocker directory
cd "$TIMELOCKER_DIR"
echo "✅ Changed to TimeLocker directory"

# Test repository configuration
echo "🔍 Testing repository configuration..."
if python3 -c "
from src.TimeLocker.completion import complete_repository_names
repos = complete_repository_names('')
print(f'Available repositories: {repos}')
if repos:
    print('✅ Repository configuration successful')
else:
    print('❌ No repositories found')
    exit(1)
"; then
    echo "✅ Repository configuration test passed"
else
    echo "❌ Repository configuration test failed"
    exit 1
fi

# Test credential manager
echo "🔐 Testing credential manager..."
if python3 -c "
from src.TimeLocker.security.credential_manager import CredentialManager
cm = CredentialManager()
if cm.credentials_file.exists():
    print('✅ Credential manager is initialized')
    print('📋 Use: python3 -m src.TimeLocker.cli credentials list')
else:
    print('⚠️ Credential manager not yet initialized')
    print('📋 Use: python3 -m src.TimeLocker.cli credentials store <repo-name>')
"; then
    echo "✅ Credential manager test passed"
else
    echo "❌ Credential manager test failed"
    exit 1
fi

# Check master password file
if [ -f "$CONFIG_DIR/master_password" ]; then
    echo "✅ Master password file exists"
else
    echo "⚠️ Master password file not found"
    echo "📋 Create it with: echo 'your-master-password' > $CONFIG_DIR/master_password && chmod 600 $CONFIG_DIR/master_password"
fi

echo ""
echo "🎉 Configuration tests completed!"
echo ""
echo "📋 Next steps for automation:"
echo "1. Set up encrypted credentials:"
echo "   $SCRIPTS_DIR/timelocker-setup-credentials.sh"
echo "2. Create master password file:"
echo "   echo 'your-master-password' > $CONFIG_DIR/master_password"
echo "   chmod 600 $CONFIG_DIR/master_password"
echo "3. Test the backup script:"
echo "   $SCRIPTS_DIR/timelocker-backup.sh"
echo "4. Set up scheduling (systemd timer or cron)"
EOF

chmod +x "$SCRIPTS_DIR/timelocker-test.sh"
echo "✅ Created test script: $SCRIPTS_DIR/timelocker-test.sh"

echo ""
echo "🎉 TimeLocker automation setup complete!"
echo ""
echo "📋 Next steps:"
echo "1. Set up encrypted credential storage:"
echo "   $SCRIPTS_DIR/timelocker-setup-credentials.sh"
echo ""
echo "2. Store passwords for your repositories:"
echo "   cd $TIMELOCKER_DIR"
echo "   python3 -m src.TimeLocker.cli credentials store local-test"
echo "   python3 -m src.TimeLocker.cli credentials store your-other-repo"
echo ""
echo "3. Create master password file for automation:"
echo "   echo 'your-master-password' > $CONFIG_DIR/master_password"
echo "   chmod 600 $CONFIG_DIR/master_password"
echo ""
echo "4. Test your configuration:"
echo "   $SCRIPTS_DIR/timelocker-test.sh"
echo ""
echo "5. Choose your scheduling method:"
echo ""
echo "   Option A - Systemd Timer (recommended for Linux):"
echo "   sudo cp $CONFIG_DIR/timelocker-backup.service /etc/systemd/system/"
echo "   sudo cp $CONFIG_DIR/timelocker-backup.timer /etc/systemd/system/"
echo "   sudo systemctl daemon-reload"
echo "   sudo systemctl enable timelocker-backup.timer"
echo "   sudo systemctl start timelocker-backup.timer"
echo ""
echo "   Option B - Cron Job:"
echo "   crontab -e"
echo "   # Then add the line from: $CONFIG_DIR/crontab-example"
echo ""
echo "6. Monitor your backups:"
echo "   tail -f $LOGS_DIR/backup.log"
echo ""
echo "🔒 Security features:"
echo "- Repository passwords encrypted with master password"
echo "- Credential manager auto-locks after use"
echo "- Master password file secured with 600 permissions"
echo "- No passwords stored in clear text"
echo "- Audit logging for credential access"
