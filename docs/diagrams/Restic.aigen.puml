@startuml

' Error Classes
class ResticError {
    + __init__(message: str)
}

class RepositoryError {
    + __init__(message: str)
}

class UnsupportedSchemeError {
    + __init__(message: str)
}

ResticError <|-- RepositoryError
RepositoryError <|-- UnsupportedSchemeError

' Define the abstract Repository class and related methods
abstract class Repository {
    - location: str
    - _explicit_password: Optional[str]
    - _cached_env: Dict[str, str]
    + __init__(location: str, password: Optional[str])
    + restic_password() : Optional[str]
    + to_env() : Dict[str, str]
    + backend_env() : Dict[str, str>
    + validate()
    + from_uri(uri: str, password: Optional[str]) : Repository
    {static} + redact_sensitive_info(uri: str) : str
}

' S3Repository extends Repository
class S3Repository {
    - aws_access_key_id: Optional[str]
    - aws_secret_access_key: Optional[str]
    - aws_default_region: Optional[str]
    + __init__(location: str, password: Optional[str],
          aws_access_key_id: Optional[str],
          aws_secret_access_key: Optional[str],
          aws_default_region: Optional[str])
    + from_parsed_uri(parsed_uri, password: Optional[str>) : S3Repository
    + backend_env() : Dict[str, str>
    + validate()
}

Repository <|-- S3Repository

' LocalRepository extends Repository
class LocalRepository {
    + from_parsed_uri(parsed_uri, password: Optional[str>) : LocalRepository
    + backend_env() : Dict[str, str>
    + validate()
}

Repository <|-- LocalRepository

' B2Repository extends Repository
class B2Repository {
    - b2_account_id: Optional[str]
    - b2_account_key: Optional[str]
    + __init__(location: str, password: Optional[str],
          b2_account_id: Optional[str],
          b2_account_key: Optional[str])
    + from_parsed_uri(parsed_uri, password: Optional[str>) : B2Repository
    + backend_env() : Dict[str, str>
    + validate()
}

Repository <|-- B2Repository

' ResticClient from restic_client.py
class ResticClient {
    - restic_version: Optional[str]
    - repo: Repository
    + __init__(repo: Repository)
    + _parse_restic_version(output: str) : str
    + _run_restic_command(*args, **kwargs) : str
    + _validate_version(version_output: str)
    + run_backup() : None
}

' Relationship: ResticClient holds a Repository
ResticClient --> Repository

' FileSelection (represents selection of file paths)
class FileSelection {
    - paths: List[str]
    + __init__(paths: Optional[List[str]])
    + add_path(path: str)
    + remove_path(path: str)
    + __iter__()
    + __repr__() : str
}

' FileExclusion (represents exclusion patterns)
class FileExclusion {
    - patterns: List[str]
    + __init__(patterns: Optional[List[str]])
    + add_pattern(pattern: str)
    + remove_pattern(pattern: str)
    + __iter__()
    + __repr__() : str
}

' BackupTarget composes a FileSelection and a FileExclusion
class BackupTarget {
    - selection: FileSelection
    - exclusion: FileExclusion
    - tags: List[str]
    + __init__(selection: FileSelection, tags: Optional[List:str], exclusion: Optional[FileExclusion])
}

' Composition relationships for BackupTarget
BackupTarget o-- FileSelection
BackupTarget o-- FileExclusion

@enduml