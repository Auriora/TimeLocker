@startuml
' PlantUML style configuration
!theme _none_
skin plantuml
hide empty members

' Project classes

class DataProtector.backup_manager.BackupManager {
    - __init__()
    + {classifier} from_uri(cls, uri: str, password: Optional[str])
    + get_repository_factory(name: str, repo_type: str)
    + list_registered_backends()
    + {static} redact_sensitive_info(uri: str)
    + register_repository_factory(name: str, repo_type: str, repository_class: Type[BackupRepository])
}

exception DataProtector.backup_manager.BackupManagerError

exception DataProtector.backup_repository.BackupError

abstract class DataProtector.backup_repository.BackupRepository {
    + apply_retention_policy(policy: RetentionPolicy, prune: bool)
    + {abstract} backup_target(targets: List[BackupTarget], tags: Any)
    + {abstract} check()
    + {abstract} forget_snapshot(snapshotid: str, prune: bool)
    + {abstract} initialize()
    + {abstract} location()
    + {abstract} prune_data()
    + {abstract} restore(snapshot_id: str, target_path: Optional[Path])
    + {abstract} snapshots(tags: Any)
    + {abstract} stats()
    + {abstract} validate()
}

struct DataProtector.backup_repository.RetentionPolicy {
    + daily: Optional[int]
    + hourly: Optional[int]
    + last: Optional[int]
    + monthly: Optional[int]
    + weekly: Optional[int]
    + yearly: Optional[int]
    + is_valid()
}

class DataProtector.backup_snapshot.BackupSnapshot {
    + id: Any
    + paths: Any
    + repo: Any
    + size: int
    + tags: List[str]
    + timestamp: Any
    - __init__(repo: BackupRepository, snapshot_id: str, timestamp: datetime, paths: list[Path])
    + delete(prune: bool)
    + find(pattern: str)
    + {classifier} from_dict(cls, repository: Any, data: Dict)
    + get_stats()
    + list(dir: Optional[Path])
    + restore(target_path: Optional[Path])
    + restore_file(target_path: Optional[Path])
    + verify()
}

class DataProtector.backup_target.BackupTarget {
    + selection: Any
    + tags: Any
    - __init__(selection: FileSelection, tags: List[str])
    + validate()
}

class DataProtector.file_selections.FileSelection {
    - __init__()
    - __repr__()
    + add_path(path: Any, selection_type: SelectionType)
    + add_pattern(pattern: str, selection_type: SelectionType)
    + add_pattern_group(group: Any, selection_type: SelectionType)
    + exclude_patterns()
    + excludes()
    + include_patterns()
    + includes()
    + remove_path(path: Any, selection_type: SelectionType)
    + remove_pattern(pattern: str, selection_type: SelectionType)
    + remove_pattern_group(group_name: str, selection_type: SelectionType)
    + validate()
}

class DataProtector.file_selections.PatternGroup {
    + {static} COMMON_GROUPS: Any
    + name: Any
    + patterns: Any
    - __init__(name: str, patterns: List[str])
    + {classifier} get_common_group(cls, group_name: str)
}

enum DataProtector.file_selections.SelectionType {
    + EXCLUDE: Any
    + INCLUDE: Any
}

class DataProtector.restic.Repositories.b2.B2ResticRepository {
    + b2_account_id: Any
    + b2_account_key: Any
    - __init__(location: str, password: Optional[str], b2_account_id: Optional[str], b2_account_key: Optional[str])
    + backend_env()
    + {classifier} from_parsed_uri(cls, parsed_uri, password: Optional[str])
    + validate()
}

class DataProtector.restic.Repositories.local.LocalResticRepository {
    + backend_env()
    + {classifier} from_parsed_uri(cls, parsed_uri, password: Optional[str])
    + validate()
}

class DataProtector.restic.Repositories.s3.S3ResticRepository {
    + aws_access_key_id: Any
    + aws_default_region: Any
    + aws_secret_access_key: Any
    - __init__(location: str, password: Optional[str], aws_access_key_id: Optional[str], aws_secret_access_key: Optional[str], aws_default_region: Optional[str])
    + backend_env()
    + {classifier} from_parsed_uri(cls, parsed_uri, password: Optional[str])
    + validate()
}

exception DataProtector.restic.errors.RepositoryError

exception DataProtector.restic.errors.ResticError

exception DataProtector.restic.errors.ResticVersionError

exception DataProtector.restic.errors.UnsupportedSchemeError

class DataProtector.restic.restic_repository.ResticRepository {
    # _cached_env: Any
    # _command: Any
    # _command: Any
    # _explicit_password: Any
    # _location: Any
    # _restic_version: Any
    - __init__(location: str, tags: Any, password: Optional[str], min_version: str)
    # _handle_restic_output(output: Dict)
    # _on_backup_status(status: Dict)
    # _on_backup_summary(summary: Dict)
    # _verify_restic_executable(min_version: str)
    + apply_retention_policy(policy: RetentionPolicy, prune: bool)
    + {abstract} backend_env()
    + backup_target(targets: List[BackupTarget], tags: Any)
    + check()
    + forget_snapshot(snapshotid: str, prune: bool)
    + initialize()
    + location()
    + password()
    + prune_data()
    + restore(snapshot_id: str, target_path: Optional[Path])
    + snapshots(tags: Any)
    + stats()
    + to_env()
    + uri()
    + validate()
}

class DataProtector.utils.command_builder.CommandBuilder {
    # _command_def: Any
    # _current_def: Any
    - __init__(command_def: CommandDefinition)
    # {static} _merge_envs(env1: Any, env2: Any)
    + build(use_short_form: bool, synopsis_values: Any)
    + clear()
    + command(name: str)
    + param(name: str, value: Any)
    + run(callback: Any, env: Any, synopsis_values: Any)
    + run_iter(env: Any, synopsis_values: Any)
}

class DataProtector.utils.command_builder.CommandDefinition {
    + default_param_style: Any
    + name: Any
    + parameters: Any
    + subcommands: Any
    + synopsis_params: Any
    - __init__(name: str, parameters: Any, subcommands: Any, default_param_style: Any, synopsis_params: Any)
}

exception DataProtector.utils.command_builder.CommandExecutionError {
    + stderr: Any
    - __init__(message, stderr)
}

struct DataProtector.utils.command_builder.CommandParameter {
    + description: str
    + name: str
    + position: Optional[int]
    + prefix: Optional[str]
    + required: bool
    + short_name: Optional[str]
    + short_style: Any
    + style: Any
    + value_required: bool
    - __post_init__()
    # {static} _convert_style(style: Any)
    + format_param_name(use_short_form: bool)
}

enum DataProtector.utils.command_builder.ParameterStyle {
    + DOUBLE_DASH: Any
    + JOINED: Any
    + POSITIONAL: Any
    + SEPARATE: Any
    + SINGLE_DASH: Any
    - __eq__(other)
    - __hash__()
    - __ne__(other)
    - __str__()
}


' Relationships

' Extensions (inheritance)
DataProtector.backup_repository.BackupRepository <|-- DataProtector.restic.restic_repository.ResticRepository
DataProtector.restic.errors.RepositoryError <|-- DataProtector.restic.errors.UnsupportedSchemeError
DataProtector.restic.errors.ResticError <|-- DataProtector.restic.errors.RepositoryError
DataProtector.restic.errors.ResticError <|-- DataProtector.restic.errors.ResticVersionError
DataProtector.restic.restic_repository.ResticRepository <|-- DataProtector.restic.Repositories.b2.B2ResticRepository
DataProtector.restic.restic_repository.ResticRepository <|-- DataProtector.restic.Repositories.local.LocalResticRepository
DataProtector.restic.restic_repository.ResticRepository <|-- DataProtector.restic.Repositories.s3.S3ResticRepository

' Compositions
DataProtector.backup_snapshot.BackupSnapshot *-- DataProtector.backup_repository.BackupRepository

' Aggregations
DataProtector.backup_snapshot.BackupSnapshot o-- DataProtector.backup_repository.BackupRepository
DataProtector.backup_target.BackupTarget o-- DataProtector.file_selections.FileSelection
DataProtector.utils.command_builder.CommandBuilder o-- DataProtector.utils.command_builder.CommandDefinition

' Weak dependencies
DataProtector.file_selections.FileSelection ..> DataProtector.file_selections.PatternGroup

' Packages
package DataProtector <<Rectangle>> 
{
}

@enduml