@startuml
' PlantUML style configuration
!theme _none_
skin plantuml
hide empty members

' Project classes

+class TimeLocker.TimeLocker.backup_manager.BackupManager {
    -__init__(): None
    +{classifier} from_uri(cls, uri: str, password: Optional[str]): Any
    +get_repository_factory(name: str, repo_type: str): Any
    +list_registered_backends(): Any
    +{static} redact_sensitive_info(uri: str): str
    +register_repository_factory(\n                                 name: str,\n                                 repo_type: str,\n                                 repository_class: Type[BackupRepository]): None
}

+exception TimeLocker.TimeLocker.backup_manager.BackupManagerError {
}

+exception TimeLocker.TimeLocker.backup_repository.BackupError {
}

+abstract class TimeLocker.TimeLocker.backup_repository.BackupRepository {
    +apply_retention_policy(policy: RetentionPolicy, prune: bool): bool
    +{abstract} backup_target(targets: List[BackupTarget], tags: Any): Dict
    +{abstract} check(): bool
    +{abstract} forget_snapshot(snapshotid: str, prune: bool): bool
    +{abstract} initialize(): bool
    +{abstract} location(): str
    +{abstract} prune_data(): bool
    +{abstract} restore(snapshot_id: str, target_path: Optional[Path]): str
    +{abstract} snapshots(tags: Any): List[BackupSnapshot]
    +{abstract} stats(): dict
    +{abstract} validate(): bool
}

+struct TimeLocker.TimeLocker.backup_repository.RetentionPolicy {
    +daily: Optional[int]
    +hourly: Optional[int]
    +last: Optional[int]
    +monthly: Optional[int]
    +weekly: Optional[int]
    +yearly: Optional[int]
    +is_valid(): bool
}

+class TimeLocker.TimeLocker.backup_snapshot.BackupSnapshot {
    +id: Any
    +paths: Any
    +repo: Any
    +size: int
    +tags: List[str]
    +timestamp: Any
    -__init__(\n              repo: BackupRepository,\n              snapshot_id: str,\n              timestamp: datetime,\n              paths: list[Path]): None
    +delete(prune: bool): str
    +find(pattern: str): list[str]
    +{classifier} from_dict(cls, repository: BackupRepository, data: Dict): Self
    +get_stats(): dict
    +list(dir: Optional[Path]): list[str]
    +restore(target_path: Optional[Path]): str
    +restore_file(target_path: Optional[Path]): bool
    +verify(): bool
}

+class TimeLocker.TimeLocker.backup_target.BackupTarget {
    +selection: Any
    +tags: Any
    -__init__(selection: FileSelection, tags: List[str]): None
    +validate(): bool
}

+class TimeLocker.TimeLocker.file_selections.FileSelection {
    -__init__(): None
    -__repr__(): str
    +add_path(path: Any, selection_type: SelectionType): None
    +add_pattern(pattern: str, selection_type: SelectionType): None
    +add_pattern_group(group: Any, selection_type: SelectionType): None
    +exclude_patterns(): Set[str]
    +excludes(): Set[Path]
    +include_patterns(): Set[str]
    +includes(): Set[Path]
    +remove_path(path: Any, selection_type: SelectionType): None
    +remove_pattern(pattern: str, selection_type: SelectionType): None
    +remove_pattern_group(group_name: str, selection_type: SelectionType): None
    +validate(): bool
}

+class TimeLocker.TimeLocker.file_selections.PatternGroup {
    +{static} COMMON_GROUPS: Any
    +name: Any
    +patterns: Any
    -__init__(name: str, patterns: List[str]): None
    +{classifier} get_common_group(cls, group_name: str): Any
}

+enum TimeLocker.TimeLocker.file_selections.SelectionType {
    +EXCLUDE: Any
    +INCLUDE: Any
}

+class TimeLocker.TimeLocker.restic.Repositories.b2.B2ResticRepository {
    +b2_account_id: Any
    +b2_account_key: Any
    -__init__(\n              location: str,\n              password: Optional[str],\n              b2_account_id: Optional[str],\n              b2_account_key: Optional[str]): None
    +backend_env(): Any
    +{classifier} from_parsed_uri(cls, parsed_uri, password: Optional[str]): Any
    +validate(): None
}

+class TimeLocker.TimeLocker.restic.Repositories.local.LocalResticRepository {
    +backend_env(): Any
    +{classifier} from_parsed_uri(cls, parsed_uri, password: Optional[str]): Any
    +validate(): None
}

+class TimeLocker.TimeLocker.restic.Repositories.s3.S3ResticRepository {
    +aws_access_key_id: Any
    +aws_default_region: Any
    +aws_secret_access_key: Any
    -__init__(\n              location: str,\n              password: Optional[str],\n              aws_access_key_id: Optional[str],\n              aws_secret_access_key: Optional[str],\n              aws_default_region: Optional[str]): None
    +backend_env(): Any
    +{classifier} from_parsed_uri(cls, parsed_uri, password: Optional[str]): Any
    +validate(): None
}

+exception TimeLocker.TimeLocker.restic.errors.RepositoryError {
}

+exception TimeLocker.TimeLocker.restic.errors.ResticError {
}

+exception TimeLocker.TimeLocker.restic.errors.ResticVersionError {
}

+exception TimeLocker.TimeLocker.restic.errors.UnsupportedSchemeError {
}

+class TimeLocker.TimeLocker.restic.restic_repository.ResticRepository {
    #_cached_env: Any
    #_command: Any
    #_explicit_password: Any
    #_location: Any
    #_restic_version: Any
    -__init__(\n              location: str,\n              tags: Any,\n              password: Optional[str],\n              min_version: str): None
    #_handle_restic_output(output: Dict): None
    #_on_backup_status(status: Dict): None
    #_on_backup_summary(summary: Dict): None
    #_verify_restic_executable(min_version: str): Any
    +apply_retention_policy(policy: RetentionPolicy, prune: bool): bool
    +{abstract} backend_env(): Any
    +backup_target(targets: List[BackupTarget], tags: Any): str
    +check(): str
    +forget_snapshot(snapshotid: str, prune: bool): bool
    +initialize(): bool
    +location(): str
    +password(): Optional[str]
    +prune_data(): str
    +restore(snapshot_id: str, target_path: Optional[Path]): str
    +snapshots(tags: Any): List[BackupSnapshot]
    +stats(): dict
    +to_env(): Any
    +uri(): str
    +validate(): str
}

+class TimeLocker.TimeLocker.utils.command_builder.CommandBuilder {
    +current_command: Any
    +definition: Any
    -__init__(definition: CommandDefinition): None
    +build(synopsis_values: Any, use_short_form: bool): List[str]
    +clear(): Any
    +command(name: str): Any
    +param(name: str, value: Any): Any
}

+class TimeLocker.TimeLocker.utils.command_builder.CommandDefinition {
    +default_param_style: Any
    +name: Any
    +parameters: Any
    +subcommands: Any
    +synopsis_params: Any
    -__init__(\n              name: str,\n              parameters: Any,\n              subcommands: Any,\n              default_param_style: ParameterStyle,\n              synopsis_params: List[str]): None
}

+class TimeLocker.TimeLocker.utils.command_builder.CommandParameter {
    +description: Any
    +name: Any
    +position: Any
    +prefix: Any
    +required: Any
    +short_name: Any
    +short_style: Any
    +style: Any
    +value_required: Any
    -__init__(\n              name: str,\n              style: ParameterStyle,\n              required: bool,\n              value_required: bool,\n              prefix: str,\n              position: Optional[int],\n              short_name: Optional[str],\n              short_style: Optional[ParameterStyle],\n              description: str): None
}

+enum TimeLocker.TimeLocker.utils.command_builder.ParameterStyle {
    +DOUBLE_DASH: Any
    +JOINED: Any
    +POSITIONAL: Any
    +SEPARATE: Any
    +SINGLE_DASH: Any
    -__eq__(other): None
    -__ne__(other): None
}


' Relationships

' Extensions (inheritance)
TimeLocker.TimeLocker.backup_repository.BackupRepository <|-- TimeLocker.TimeLocker.restic.restic_repository.ResticRepository
TimeLocker.TimeLocker.restic.errors.RepositoryError <|-- TimeLocker.TimeLocker.restic.errors.UnsupportedSchemeError
TimeLocker.TimeLocker.restic.errors.ResticError <|-- TimeLocker.TimeLocker.restic.errors.RepositoryError
TimeLocker.TimeLocker.restic.errors.ResticError <|-- TimeLocker.TimeLocker.restic.errors.ResticVersionError
TimeLocker.TimeLocker.restic.restic_repository.ResticRepository <|-- TimeLocker.TimeLocker.restic.Repositories.b2.B2ResticRepository
TimeLocker.TimeLocker.restic.restic_repository.ResticRepository <|-- TimeLocker.TimeLocker.restic.Repositories.local.LocalResticRepository
TimeLocker.TimeLocker.restic.restic_repository.ResticRepository <|-- TimeLocker.TimeLocker.restic.Repositories.s3.S3ResticRepository

' Aggregations
TimeLocker.TimeLocker.utils.command_builder.CommandBuilder o-- TimeLocker.TimeLocker.utils.command_builder.CommandDefinition
TimeLocker.TimeLocker.utils.command_builder.CommandDefinition o-- TimeLocker.TimeLocker.utils.command_builder.ParameterStyle
TimeLocker.TimeLocker.utils.command_builder.CommandParameter o-- TimeLocker.TimeLocker.utils.command_builder.ParameterStyle

' Weak dependencies
TimeLocker.TimeLocker.file_selections.FileSelection ..> TimeLocker.TimeLocker.file_selections.PatternGroup

' Packages
package TimeLocker <<Rectangle>> {
}

@enduml